<?php
/**
 * Feeder User Settings
 *
 * @package feeder
 */

use PHPePub\Core\EPub;
use PHPePub\Helpers\CalibreHelper;

$book = new EPub();

/**
 * This class handles all settings for feeder users.
 */
class Feeder_Settings {

	/**
	 * A user object set up by __construct.
	 *
	 * @var WP_User $user.
	 */
	private $user;

	/**
	 * A prefix so no user_meta keys may be duplucates with other plugin variables.
	 *
	 * @var string $prefix.
	 */
	private $prefix = 'feeder_';

	/**
	 * Instantiate class variables.
	 *
	 * @param WP_User $user A user object set upp when class is initiated.
	 */
	public function __construct( $user ) {
		$this->user = $user;
	}

	/**
	 * Fetching and returning a user meta value.
	 *
	 * @param string $name The user meta key to be fetched.
	 *
	 * @return mixed.
	 */
	public function get_setting( $name ) {
		$name = $this->prefix . $name;
		return get_user_meta( $this->user->ID, $name, true );
	}

	/**
	 * Setting a user meta value.
	 *
	 * @param string $name The user meta key to be setted.
	 * @param string $value The user meta vlue to be setted.
	 */
	public function set_setting( $name, $value ) {
		$name = $this->prefix . $name;
		update_user_meta( $this->user->ID, $name, $value );
	}

	/**
	 * Transforms the image to a kindle friendly version.
	 *
	 * @param string $image A file url to the image.
	 */
	public function convert_image( $image ) {
		$imagick = new Imagick( $image );
		$imagick->setImageFormat( 'png' );
		$imagick->transformImageColorspace( Imagick::IMGTYPE_GRAYSCALE );
		$imagick->cropThumbnailImage( 600, 800 );
		$imagick->setImageDepth( 8 );
		$imagick->writeImage( $image );
	}

	/**
	 * Handle posted request data if it comes from Feeder User Settings forms.
	 */
	public function process_post() {
		global $feeder_error_messages;

		if ( isset( $_REQUEST['_wpnonce'] ) ) {
			$retrieved_nonce = sanitize_key( $_REQUEST['_wpnonce'] );
			
			// Continue only if wp nounce sums upp with feeder_sceensaver.
			if ( wp_verify_nonce( $retrieved_nonce, 'feeder_screensaver' ) ) {
				if ( ! function_exists( 'wp_handle_upload' ) ) {
					require_once( ABSPATH . 'wp-admin/includes/file.php' );
				}
				$uploadedfile = $_FILES['feeder_screensaver'];
				$upload_overrides = array(
					'test_form' => false
				);
				$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
				if ( $movefile && ! isset( $movefile['error'] ) ) {
					
					$upload_dir    = wp_upload_dir();
					$file_dir      = $upload_dir['basedir'] . '/' . $this->user->user_login;
					$file_basename = md5( $this->user->user_login );
					$save_file_url = "{$file_dir}/{$file_basename}.png";
					
					rename( $movefile[ 'file' ], $save_file_url );
					$this->convert_image( $save_file_url );
					$this->set_setting( 'screensaver', $save_file_url );
				} else {
					/*
					 * Error generated by _wp_handle_upload()
					 * @see _wp_handle_upload() in wp-admin/includes/file.php
					 */
					echo $movefile['error'];
				}
			}
			
			// Continue only if wp nounce sums upp with feeder_settings.
			if ( wp_verify_nonce( $retrieved_nonce, 'feeder_settings' ) ) {

				if ( isset( $_REQUEST['feeder_email'] ) ) {
					$value = sanitize_email( wp_unslash( $_REQUEST['feeder_email'] ) );
					if ( is_email( $value ) ) {
						$this->set_setting( 'email', $value );
					} else {
						$feeder_error_messages[] = esc_html__( 'Not a valide email.', 'feeder' );
					}
				}

				if ( isset( $_REQUEST['feeder_schedule'] ) ) {
					// Save scheduling.
					$value     = sanitize_text_field( wp_unslash( $_REQUEST['feeder_schedule'] ) );
					$old_value = $this->set_setting( 'schedule', $value );
					if ( ! empty( $value ) ) {
						$this->set_setting( 'schedule', $value );
					} else {
						$feeder_error_messages[] = esc_html__( 'No valide scheduling.', 'feeder' );
					}
					// If never been scheduled before set default values och schedule was changed.
					$last = $this->get_setting( 'last' );
					$next = $this->get_setting( 'next' );
					if ( $old_value !== $value || empty( $last ) || empty( $next ) ) {
						$this->set_setting( 'next', strtotime( $value ) );
						$this->set_setting( 'last', time() );
					}
				}
			}
		}
	}
}

/**
 * Let class handle post requests for the current user.
 */
add_action(
	'init',
	function() {
		$user          = wp_get_current_user();
		$user_settings = new Feeder_Settings( $user );

		$user_settings->process_post();
	}
);
